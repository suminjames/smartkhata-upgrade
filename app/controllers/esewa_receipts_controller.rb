class EsewaReceiptsController < VisitorsController
  include EsewaReceiptsHelper

  before_action :set_esewa_receipt, only: [:failure, :success]

  def index
    @esewa_receipts = EsewaReceipt.all
  end

  def create
    ActiveRecord::Base.transaction do
      @esewa_receipt = EsewaReceipt.new(esewa_receipt_params.merge(success_url: get_success_url))

      if @esewa_receipt.save

        receipt_transaction = ReceiptTransaction.create(receipt_transaction_params.merge(receivable:       @esewa_receipt,
                                                                                         amount:           params['total_amount'],
                                                                                         transaction_id:   SecureRandom.hex(10),
                                                                                         transaction_date: Date.today.to_s,
                                                                                         request_sent_at:  Time.now))

        @esewa_receipt.update(failure_url: get_failure_url + "&oid=#{@esewa_receipt.get_transaction_id}")

        if receipt_transaction.persisted?
          render json: { payment: @esewa_receipt, product_id: @esewa_receipt.get_transaction_id, security_code: get_esewa_security_code }
        else
          raise ActiveRecord::Rollback
          render json: { msg: 'cannot save esewa payment transaction record' }
        end

      else
        render json: { msg: 'cannot save esewa payment record' }
      end
    end
  end

  def success
    # this check is to make sure that the verification request is not sent again when the page is reloaded
    # as a previous payment_verification process would already have set the status of the transaction
    if @receipt_transaction.status.nil?
      @receipt_transaction.set_response_received_time

      # this is sent as a response from esewa and saved for future reference
      # refId is a unique payment reference code generated by eSewa
      # amt is the total payment amount
      @esewa_receipt.set_response_ref(params[:refId])
      @esewa_receipt.set_response_amount(params[:amt])

      @verification_status = send_esewa_transaction_verification(@esewa_receipt)
    end
  end

  def failure
    @receipt_transaction.failure!
    @receipt_transaction.set_response_received_time
  end

  private

  def send_esewa_transaction_verification(payment)
    ReceiptTransactions::Esewa::TransactionVerificationService.new(payment).call
  end

  def set_esewa_receipt
    @receipt_transaction = ReceiptTransaction.find_by(transaction_id: params[:oid])
    @esewa_receipt      = @receipt_transaction.receivable
  end

  def esewa_receipt_params
    params.permit(:amount, :service_charge, :delivery_charge, :tax_amount)
  end

  def receipt_transaction_params
    params.permit(bill_ids: [])
  end
end
