class ReceiptTransactionsController < VisitorsController
  before_action :set_voucher_general_params, :set_voucher_creation_params, only: :success

  def initiate_payment
    all_bills = Bill.includes(:client_account).where(id: params[:bill_ids])

    @bills        = all_bills.decorate
    @total_amount = all_bills.sum(:net_amount).ceil(0)
    @bill_ids     = params[:bill_ids]

    @esewa_receipt_url = EsewaReceipt::PAYMENT_URL
    @nchl_receipt_url  = NchlReceipt::PAYMENT_URL

  end

  def success
    params[:TXNID] ? get_receipt_transaction(params[:TXNID]) : get_receipt_transaction(params[:oid])

    # this check is to make sure that the verification request is not sent again when the page is reloaded
    # as a previous payment_verification process would already have set the status of the transaction
    if @receipt_transaction.status.nil?
      @receipt_transaction.set_response_received_time
      create_voucher
      if @receipt_transaction.receivable_type == "NchlReceipt"
        @verification_status = nchl_receipt_verification(@receipt_transaction)
      elsif @receipt_transaction.receivable_type == "EsewaReceipt"
        @verification_status = esewa_receipt_verification(@receipt_transaction.receivable)
      end
    end
  end

  def failure
    params[:TXNID] ? get_receipt_transaction(params[:TXNID]) : get_receipt_transaction(params[:oid])
    @receipt_transaction.set_failure_response if @receipt_transaction.status.nil?
  end

  private

  def get_receipt_transaction(transaction_id)
    @receipt_transaction = ReceiptTransaction.find_by(transaction_id: transaction_id)
  end

  def get_client_account_id(transaction_id)
    receipt_transaction = get_receipt_transaction(transaction_id)
    receipt_transaction.bills.last.client_account_id
  end

  def get_bill_ids(transaction_id)
    receipt_transaction = get_receipt_transaction(transaction_id)
    receipt_transaction.bill_ids
  end

  def nchl_receipt_verification(receipt_transaction)
    ReceiptTransactions::Nchl::PaymentValidation.new(receipt_transaction).validate
  end

  def esewa_receipt_verification(esewa_receipt)
    # this is sent as a response from esewa and saved for future reference
    # refId is a unique payment reference code generated by eSewa
    # amt is the total payment amount

    esewa_receipt.set_response_ref_and_amt(params[:refId], params[:amt])

    ReceiptTransactions::Esewa::TransactionVerificationService.new(esewa_receipt).call
  end

  def set_clear_ledger
    def set_clear_ledger
      clear_ledger = false
      if params[:clear_ledger].present?
        return true if (params[:clear_ledger] == true || params[:clear_ledger] == 'true')
      end
      clear_ledger
    end
  end

  def set_voucher_general_params
    # get parameters for voucher types and assign it as journal if not available
    @bill_ids     = []
    @voucher_type = params[:TXNID] ? Voucher.voucher_types[:receipt_nchl] : Voucher.voucher_types[:receipt_esewa]
    # client account id ensures the vouchers are on the behalf of the client
    @client_account_id = params[:TXNID] ? get_client_account_id(params[:TXNID]) : get_client_account_id(params[:oid])
    # get bill id if present
    @bill_id           = params[:bill_id].to_i if params[:bill_id].present?
    @bill_ids          = params[:TXNID] ? get_bill_ids(params[:TXNID]) : get_bill_ids(params[:oid])
    # check if clear ledger balance is present
    @clear_ledger = set_clear_ledger
  end

  def set_voucher_creation_params
    @fixed_ledger_id = params[:fixed_ledger_id].to_i if params[:fixed_ledger_id].present?
    @cheque_number = params[:cheque_number].to_i if params[:cheque_number].present?
    @voucher_settlement_type = 'default'
    @group_leader_ledger_id = params[:group_leader_ledger_id].to_i if params[:group_leader_ledger_id].present?
    @vendor_account_id = params[:vendor_account_id].to_i if params[:vendor_account_id].present?
  end

  def with_branch_user_params_receipt_transaction(permitted_params, assign_branch = true)
    branch_id = branch_id_for_entry( permitted_params[:branch_id] )
    _additional_params = {}
    _additional_params.merge!({ branch_id: branch_id }) if assign_branch && params[:action] != 'update'
    permitted_params.merge!(_additional_params)
  end

  def get_bill_names(bill_ids)
    bills = Bill.where(id: bill_ids)
    bill_with_names = []
    bills.each do |bill|
      bill_with_names.push("#{bill.fy_code}-#{bill.bill_number}")
    end
    bill_with_names.join(',')
  end



  def get_voucher_details

    permitted_params = {"date_bs"=>ad_to_bs(Date.today),
     "value_date_bs"=>ad_to_bs(Date.today),
     "desc"=>"",
     "particulars_attributes"=>
         {"0"=>{"ledger_id"=>"9", "description"=>"", "amount"=>@receipt_transaction.amount.to_s, "transaction_type"=>"dr", "branch_id"=>"1"},
          "3"=>
              {"ledger_id"=>"12",
               "description"=>"",
               "amount"=>@receipt_transaction.amount.to_s,
               "transaction_type"=>"cr",
               "branch_id"=>"1",
               "bills_selection"=> @receipt_transaction.bill_ids.join(','),
               "selected_bill_names"=>get_bill_names(@receipt_transaction.bill_ids),
               "ledger_balance_adjustment"=>""}}}

    with_branch_user_params_receipt_transaction(permitted_params)

  end

  def create_voucher
    puts @receipt_transaction
    @voucher,
        @is_payment_receipt,
        @ledger_list_financial,
        @ledger_list_available,
        @default_ledger_id,
        @voucher_type,
        @vendor_account_list,
        @client_ledger_list = Vouchers::Setup.new(voucher_type:      @voucher_type,
                                                  client_account_id: @client_account_id,
                                                  # bill_id: @bill_id,
                                                  clear_ledger: @clear_ledger,
                                                  bill_ids:     @bill_ids).voucher_and_relevant(selected_branch_id, selected_fy_code)

    # ignore some validations when the voucher type is sales or purchase
    @is_payment_receipt = false
    # create voucher with the posted parameters
    @voucher         = Voucher.new(get_voucher_details)
    voucher_creation = Vouchers::Create.new(voucher_type:            @voucher_type,
                                            client_account_id:       @client_account_id,
                                            bill_id:                 @bill_id,
                                            clear_ledger:            @clear_ledger,
                                            voucher:                 @voucher,
                                            bill_ids:                @bill_ids,
                                            voucher_settlement_type: @voucher_settlement_type,
                                            group_leader_ledger_id:  @group_leader_ledger_id,
                                            vendor_account_id:       @vendor_account_id,
                                            tenant_full_name:        current_tenant.full_name,
                                            selected_fy_code:        selected_fy_code,
                                            selected_branch_id:      selected_branch_id,
                                            current_user:            User.last)
    respond_to do |format|
      if voucher_creation.process

        @voucher    = voucher_creation.voucher
        settlements = voucher_creation.settlements

        format.html {
          if settlements.size > 0 && !@voucher.is_payment_bank?
            # settlement_ids = settlements.pluck(:id)
            settlement_ids = settlements.map(&:id)
            # TODO (Remove this hack to show all the settlements)
            redirect_to show_multiple_settlements_path(settlement_ids: settlement_ids)
          else
            redirect_to @voucher, notice: 'Voucher was successfully created.'
          end
        }
        format.json { render :show, status: :created, location: @voucher }
      else
        @voucher = voucher_creation.voucher
        # ledger list and is purchase sales is required for the extra section to show up for payment and receipt case
        # ledger list financial contains only bank ledgers and cash ledger
        # ledger list no banks contains all ledgers except banks (to avoid bank transfers using voucher)
        @ledger_list_financial   = voucher_creation.ledger_list_financial
        @ledger_list_available   = voucher_creation.ledger_list_available
        @vendor_account_list     = voucher_creation.vendor_account_list
        @client_ledger_list      = voucher_creation.client_ledger_list
        @is_payment_receipt      = voucher_creation.is_payment_receipt?(@voucher_type)
        @voucher_settlement_type = voucher_creation.voucher_settlement_type
        @group_leader_ledger_id  = voucher_creation.group_leader_ledger_id
        @vendor_account_id       = voucher_creation.vendor_account_id

        if voucher_creation.error_message
          flash.now[:error] = voucher_creation.error_message
        end
        format.html { render :success }
        format.json { render json: @voucher.errors, status: :unprocessable_entity }
      end
    end
  rescue ActiveRecord::RecordInvalid => e
    flash[:error] = e.message
    redirect_to :back
  end
end